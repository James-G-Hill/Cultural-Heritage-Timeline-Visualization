package org.jghill.timelinesvisualizercollections.gui;

import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.awt.event.KeyEvent;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.Future;
import java.util.regex.Pattern;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JComboBox;
import org.apache.jena.atlas.web.HttpException;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;
import org.jghill.timelinesvisualizercollections.Collection;
import org.jghill.timelinesvisualizercollections.container.CollectionContainer;
import org.jghill.timelinesvisualizercollections.display.EntityDisplay;
import org.jghill.timelinesvisualizerdispatcher.Dispatcher;
import org.jghill.timelinesvisualizerqueriesbuilder.QueryBuilder;
import org.jghill.timelinesvisualizerqueriesbuilder.QuerySettings;
import org.jghill.timelinevisualizerentities.Entities;
import org.jghill.timelinevisualizerentitiescollection.EntitiesCollection;
import org.jghill.timelinevisualizerqueries.QueryShell;
import org.jghill.timelinevisualizersources.Source;
import org.jghill.timelinevisualizersources.SourceCollection;
import org.netbeans.api.io.IOProvider;
import org.netbeans.api.io.InputOutput;
import org.openide.util.Lookup;
import org.openide.util.LookupEvent;
import org.openide.util.RequestProcessor;
import org.openide.util.lookup.AbstractLookup;
import org.openide.util.lookup.InstanceContent;

/**
 * A window for displaying a collection and it's internals.
 */
@ConvertAsProperties(
        dtd = "-//org.jghill.timelinesvisualizercollectionsgui//Collection//EN",
        autostore = false
)
@TopComponent.Description(
        preferredID = "CollectionTopComponent"
)
@TopComponent.Registration(mode = "editor", openAtStartup = false)
@ActionID(category = "Window", id = "org.jghill.timelinesvisualizercollectionsgui.CollectionTopComponent")
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_CollectionAction",
        preferredID = "CollectionTopComponent"
)
@Messages({
    "CTL_CollectionAction=Collection",
    "CTL_CollectionTopComponent=Collection Window",
    "HINT_CollectionTopComponent=This is a Collection window"
})
public final class CollectionTopComponent extends TopComponent implements FocusListener {
    
    public CollectionTopComponent() {
        
        Lookup tcLookup = CollectionContainer.getLookup();
        coll = tcLookup.lookup(Collection.class);
        CollectionContainer.addCollection(coll);
        
        initComponents();
        setToolTipText(Bundle.HINT_CollectionTopComponent());
        putClientProperty(TopComponent.PROP_CLOSING_DISABLED, Boolean.FALSE);
        putClientProperty(TopComponent.PROP_DRAGGING_DISABLED, Boolean.TRUE);
        putClientProperty(TopComponent.PROP_MAXIMIZATION_DISABLED, Boolean.TRUE);
        putClientProperty(TopComponent.PROP_UNDOCKING_DISABLED, Boolean.TRUE);
        
        TitleTextBox.setText(coll.getName());
        qtb = (QueryTableModel) QueriesTable.getModel();
        etb = (EntityTableModel) EntitiesTable.getModel();
        
        Lookup sLookup = SourceCollection.getInstance().getLookup();
        sources = sLookup.lookupResult(Source.class);
        sources.allInstances();
        sources.addLookupListener((LookupEvent e) -> {
            SourceComboBox.setModel(new DefaultComboBoxModel(SourceCollection.collectionToArray()));
        });
        
        FirstFilterComboBox.addItemListener(collectionDisplayPanel);
        
    }

    /**
     * This method is called from within the constructor to initialise the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Tab = new javax.swing.JTabbedPane();
        Information = new javax.swing.JPanel();
        NotesTextPanel = new javax.swing.JScrollPane();
        NotesTextBox = new javax.swing.JTextArea();
        NotesText = new javax.swing.JLabel();
        TitleTextBox = new javax.swing.JTextField();
        Queries = new javax.swing.JPanel();
        QueriesScrollPane = new javax.swing.JScrollPane();
        QueriesTable = new javax.swing.JTable();
        ExistingQueriesText = new javax.swing.JLabel();
        QuerySeparator = new javax.swing.JSeparator();
        QueryBuilderText = new javax.swing.JLabel();
        CreateButton = new javax.swing.JButton();
        ResetButton = new javax.swing.JButton();
        VerticalSeparator = new javax.swing.JSeparator();
        SourceTextLabel = new javax.swing.JLabel();
        SourceComboBox = new javax.swing.JComboBox<>();
        HasNameCheckBox = new javax.swing.JCheckBox();
        HasImageCheckBox = new javax.swing.JCheckBox();
        HasIdentifierCheckBox = new javax.swing.JCheckBox();
        DeleteButton = new javax.swing.JButton();
        AndText1 = new javax.swing.JLabel();
        NameTextField = new javax.swing.JTextField();
        IdentifierTextField = new javax.swing.JTextField();
        RunButton = new javax.swing.JButton();
        HasLimitCheckBox = new javax.swing.JCheckBox();
        LimitTextField = new javax.swing.JTextField();
        SourceNameTextLabel = new javax.swing.JLabel();
        QueryNameTextField = new javax.swing.JTextField();
        jSeparator1 = new javax.swing.JSeparator();
        CreationYearLabel = new javax.swing.JLabel();
        CreationStartYearTextField = new javax.swing.JTextField();
        CreationEndYearTextField = new javax.swing.JTextField();
        HasDepictionCheckBox = new javax.swing.JCheckBox();
        DepictionTextField = new javax.swing.JTextField();
        HasConsistsCheckBox = new javax.swing.JCheckBox();
        MaterialTextField = new javax.swing.JTextField();
        HasTypeCheckBox = new javax.swing.JCheckBox();
        TypeTextField = new javax.swing.JTextField();
        HasTechniqueCheckBox = new javax.swing.JCheckBox();
        TechniqueTextField = new javax.swing.JTextField();
        Entities = new javax.swing.JPanel();
        EntitiesScrollPane = new javax.swing.JScrollPane();
        EntitiesTable = new javax.swing.JTable();
        Visualizer = new javax.swing.JPanel();
        FirstFilterLabel = new javax.swing.JLabel();
        FirstFilterComboBox = new javax.swing.JComboBox<>();
        collectionDisplayPanel = new org.jghill.timelinesvisualizercollections.display.CollectionDisplayPanel();

        setPreferredSize(new java.awt.Dimension(1100, 500));

        Tab.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        NotesTextBox.setColumns(20);
        NotesTextBox.setRows(5);
        NotesTextPanel.setViewportView(NotesTextBox);

        org.openide.awt.Mnemonics.setLocalizedText(NotesText, org.openide.util.NbBundle.getMessage(CollectionTopComponent.class, "CollectionTopComponent.NotesText.text")); // NOI18N

        TitleTextBox.setColumns(50);
        TitleTextBox.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        TitleTextBox.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        TitleTextBox.setText(org.openide.util.NbBundle.getMessage(CollectionTopComponent.class, "CollectionTopComponent.TitleTextBox.text")); // NOI18N
        TitleTextBox.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        TitleTextBox.setMargin(new java.awt.Insets(10, 10, 10, 10));
        TitleTextBox.setMinimumSize(new java.awt.Dimension(50, 50));
        TitleTextBox.setPreferredSize(new java.awt.Dimension(1000, 50));
        TitleTextBox.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                TitleTextBoxKeyReleased(evt);
            }
        });

        javax.swing.GroupLayout InformationLayout = new javax.swing.GroupLayout(Information);
        Information.setLayout(InformationLayout);
        InformationLayout.setHorizontalGroup(
            InformationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, InformationLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(InformationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(TitleTextBox, javax.swing.GroupLayout.DEFAULT_SIZE, 1055, Short.MAX_VALUE)
                    .addComponent(NotesTextPanel)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, InformationLayout.createSequentialGroup()
                        .addComponent(NotesText, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 855, Short.MAX_VALUE)))
                .addContainerGap())
        );
        InformationLayout.setVerticalGroup(
            InformationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(InformationLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(TitleTextBox, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(NotesText)
                .addGap(18, 18, 18)
                .addComponent(NotesTextPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 328, Short.MAX_VALUE)
                .addContainerGap())
        );

        Tab.addTab(org.openide.util.NbBundle.getMessage(CollectionTopComponent.class, "CollectionTopComponent.Information.TabConstraints.tabTitle"), Information); // NOI18N

        QueriesScrollPane.setPreferredSize(new java.awt.Dimension(440, 400));

        QueriesTable.setAutoCreateRowSorter(true);
        QueriesTable.setModel(new QueryTableModel(coll));
        QueriesTable.setRowHeight(20);
        QueriesScrollPane.setViewportView(QueriesTable);

        org.openide.awt.Mnemonics.setLocalizedText(ExistingQueriesText, org.openide.util.NbBundle.getMessage(CollectionTopComponent.class, "CollectionTopComponent.ExistingQueriesText.text")); // NOI18N
        ExistingQueriesText.setPreferredSize(new java.awt.Dimension(100, 14));

        QuerySeparator.setOrientation(javax.swing.SwingConstants.VERTICAL);

        org.openide.awt.Mnemonics.setLocalizedText(QueryBuilderText, org.openide.util.NbBundle.getMessage(CollectionTopComponent.class, "CollectionTopComponent.QueryBuilderText.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(CreateButton, org.openide.util.NbBundle.getMessage(CollectionTopComponent.class, "CollectionTopComponent.CreateButton.text")); // NOI18N
        CreateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CreateButtonActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(ResetButton, org.openide.util.NbBundle.getMessage(CollectionTopComponent.class, "CollectionTopComponent.ResetButton.text")); // NOI18N
        ResetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ResetButtonActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(SourceTextLabel, org.openide.util.NbBundle.getMessage(CollectionTopComponent.class, "CollectionTopComponent.SourceTextLabel.text")); // NOI18N

        SourceComboBox.setModel(new DefaultComboBoxModel(SourceCollection.getInstance().collectionToArray()));

        org.openide.awt.Mnemonics.setLocalizedText(HasNameCheckBox, org.openide.util.NbBundle.getMessage(CollectionTopComponent.class, "CollectionTopComponent.HasNameCheckBox.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(HasImageCheckBox, org.openide.util.NbBundle.getMessage(CollectionTopComponent.class, "CollectionTopComponent.HasImageCheckBox.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(HasIdentifierCheckBox, org.openide.util.NbBundle.getMessage(CollectionTopComponent.class, "CollectionTopComponent.HasIdentifierCheckBox.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(DeleteButton, org.openide.util.NbBundle.getMessage(CollectionTopComponent.class, "CollectionTopComponent.DeleteButton.text")); // NOI18N
        DeleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteButtonActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(AndText1, org.openide.util.NbBundle.getMessage(CollectionTopComponent.class, "CollectionTopComponent.AndText1.text")); // NOI18N

        NameTextField.setText(org.openide.util.NbBundle.getMessage(CollectionTopComponent.class, "CollectionTopComponent.NameTextField.text")); // NOI18N

        IdentifierTextField.setText(org.openide.util.NbBundle.getMessage(CollectionTopComponent.class, "CollectionTopComponent.IdentifierTextField.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(RunButton, org.openide.util.NbBundle.getMessage(CollectionTopComponent.class, "CollectionTopComponent.RunButton.text")); // NOI18N
        RunButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RunButtonActionPerformed(evt);
            }
        });

        HasLimitCheckBox.setSelected(true);
        org.openide.awt.Mnemonics.setLocalizedText(HasLimitCheckBox, org.openide.util.NbBundle.getMessage(CollectionTopComponent.class, "CollectionTopComponent.HasLimitCheckBox.text")); // NOI18N

        LimitTextField.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        LimitTextField.setText(org.openide.util.NbBundle.getMessage(CollectionTopComponent.class, "CollectionTopComponent.LimitTextField.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(SourceNameTextLabel, org.openide.util.NbBundle.getMessage(CollectionTopComponent.class, "CollectionTopComponent.SourceNameTextLabel.text")); // NOI18N
        SourceNameTextLabel.setOpaque(true);

        QueryNameTextField.setText(org.openide.util.NbBundle.getMessage(CollectionTopComponent.class, "CollectionTopComponent.QueryNameTextField.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(CreationYearLabel, org.openide.util.NbBundle.getMessage(CollectionTopComponent.class, "CollectionTopComponent.CreationYearLabel.text")); // NOI18N
        CreationYearLabel.setToolTipText(org.openide.util.NbBundle.getMessage(CollectionTopComponent.class, "CollectionTopComponent.CreationYearLabel.toolTipText")); // NOI18N

        CreationStartYearTextField.setText(org.openide.util.NbBundle.getMessage(CollectionTopComponent.class, "CollectionTopComponent.CreationStartYearTextField.text")); // NOI18N

        CreationEndYearTextField.setText(org.openide.util.NbBundle.getMessage(CollectionTopComponent.class, "CollectionTopComponent.CreationEndYearTextField.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(HasDepictionCheckBox, org.openide.util.NbBundle.getMessage(CollectionTopComponent.class, "CollectionTopComponent.HasDepictionCheckBox.text")); // NOI18N

        DepictionTextField.setText(org.openide.util.NbBundle.getMessage(CollectionTopComponent.class, "CollectionTopComponent.DepictionTextField.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(HasConsistsCheckBox, org.openide.util.NbBundle.getMessage(CollectionTopComponent.class, "CollectionTopComponent.HasConsistsCheckBox.text")); // NOI18N

        MaterialTextField.setText(org.openide.util.NbBundle.getMessage(CollectionTopComponent.class, "CollectionTopComponent.MaterialTextField.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(HasTypeCheckBox, org.openide.util.NbBundle.getMessage(CollectionTopComponent.class, "CollectionTopComponent.HasTypeCheckBox.text")); // NOI18N

        TypeTextField.setText(org.openide.util.NbBundle.getMessage(CollectionTopComponent.class, "CollectionTopComponent.TypeTextField.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(HasTechniqueCheckBox, org.openide.util.NbBundle.getMessage(CollectionTopComponent.class, "CollectionTopComponent.HasTechniqueCheckBox.text")); // NOI18N

        TechniqueTextField.setText(org.openide.util.NbBundle.getMessage(CollectionTopComponent.class, "CollectionTopComponent.TechniqueTextField.text")); // NOI18N

        javax.swing.GroupLayout QueriesLayout = new javax.swing.GroupLayout(Queries);
        Queries.setLayout(QueriesLayout);
        QueriesLayout.setHorizontalGroup(
            QueriesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(QueriesLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(QueriesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(ExistingQueriesText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(QueriesLayout.createSequentialGroup()
                        .addComponent(DeleteButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(RunButton))
                    .addComponent(QueriesScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(QuerySeparator, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(QueriesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(VerticalSeparator)
                    .addGroup(QueriesLayout.createSequentialGroup()
                        .addComponent(QueryBuilderText)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(SourceNameTextLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(QueryNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, QueriesLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(QueriesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, QueriesLayout.createSequentialGroup()
                                .addComponent(ResetButton)
                                .addGap(18, 18, 18)
                                .addComponent(CreateButton))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, QueriesLayout.createSequentialGroup()
                                .addGroup(QueriesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(QueriesLayout.createSequentialGroup()
                                        .addGroup(QueriesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(HasIdentifierCheckBox)
                                            .addComponent(HasNameCheckBox)
                                            .addComponent(HasDepictionCheckBox))
                                        .addGap(52, 52, 52))
                                    .addGroup(QueriesLayout.createSequentialGroup()
                                        .addComponent(CreationYearLabel)
                                        .addGap(18, 18, 18)))
                                .addGroup(QueriesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(QueriesLayout.createSequentialGroup()
                                        .addComponent(CreationStartYearTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(AndText1)
                                        .addGap(18, 18, 18)
                                        .addComponent(CreationEndYearTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(QueriesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(NameTextField)
                                        .addComponent(IdentifierTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(QueriesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(MaterialTextField)
                                        .addComponent(DepictionTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(174, 174, 174))))
                    .addGroup(QueriesLayout.createSequentialGroup()
                        .addGroup(QueriesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(QueriesLayout.createSequentialGroup()
                                .addComponent(SourceTextLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(SourceComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(QueriesLayout.createSequentialGroup()
                                .addGroup(QueriesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(HasLimitCheckBox)
                                    .addGroup(QueriesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(LimitTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGroup(QueriesLayout.createSequentialGroup()
                                            .addGroup(QueriesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(HasTypeCheckBox)
                                                .addComponent(HasTechniqueCheckBox)
                                                .addComponent(HasConsistsCheckBox))
                                            .addGap(22, 22, 22)
                                            .addGroup(QueriesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                .addComponent(TypeTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 112, Short.MAX_VALUE)
                                                .addComponent(TechniqueTextField)))))
                                .addGap(18, 18, 18)
                                .addComponent(HasImageCheckBox)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        QueriesLayout.setVerticalGroup(
            QueriesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(QuerySeparator)
            .addGroup(QueriesLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(QueriesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, QueriesLayout.createSequentialGroup()
                        .addComponent(ExistingQueriesText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(QueriesScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 379, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(QueriesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(DeleteButton)
                            .addComponent(RunButton)))
                    .addGroup(QueriesLayout.createSequentialGroup()
                        .addGroup(QueriesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(QueryBuilderText)
                            .addComponent(SourceNameTextLabel)
                            .addComponent(QueryNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(VerticalSeparator, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(QueriesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(SourceComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(SourceTextLabel))
                        .addGap(26, 26, 26)
                        .addGroup(QueriesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(QueriesLayout.createSequentialGroup()
                                .addGroup(QueriesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(AndText1)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, QueriesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(CreationStartYearTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(CreationYearLabel)))
                                .addGap(18, 18, 18)
                                .addGroup(QueriesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(NameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(HasNameCheckBox))
                                .addGap(18, 18, 18)
                                .addGroup(QueriesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(IdentifierTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(HasIdentifierCheckBox))
                                .addGap(18, 18, 18)
                                .addGroup(QueriesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(DepictionTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(HasDepictionCheckBox)))
                            .addComponent(CreationEndYearTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(QueriesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(MaterialTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(HasConsistsCheckBox))
                        .addGap(18, 18, 18)
                        .addGroup(QueriesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(HasTypeCheckBox)
                            .addComponent(TypeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(QueriesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(HasTechniqueCheckBox)
                            .addComponent(TechniqueTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(QueriesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(HasLimitCheckBox)
                            .addComponent(LimitTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(HasImageCheckBox))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(QueriesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(CreateButton)
                            .addComponent(ResetButton))))
                .addContainerGap())
        );

        Tab.addTab(org.openide.util.NbBundle.getMessage(CollectionTopComponent.class, "CollectionTopComponent.Queries.TabConstraints.tabTitle"), Queries); // NOI18N

        EntitiesScrollPane.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        EntitiesTable.setAutoCreateRowSorter(true);
        EntitiesTable.setModel(new EntityTableModel(coll));
        EntitiesScrollPane.setViewportView(EntitiesTable);

        javax.swing.GroupLayout EntitiesLayout = new javax.swing.GroupLayout(Entities);
        Entities.setLayout(EntitiesLayout);
        EntitiesLayout.setHorizontalGroup(
            EntitiesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(EntitiesLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(EntitiesScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 1055, Short.MAX_VALUE)
                .addContainerGap())
        );
        EntitiesLayout.setVerticalGroup(
            EntitiesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(EntitiesLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(EntitiesScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 428, Short.MAX_VALUE)
                .addContainerGap())
        );

        Tab.addTab(org.openide.util.NbBundle.getMessage(CollectionTopComponent.class, "CollectionTopComponent.Entities.TabConstraints.tabTitle"), Entities); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(FirstFilterLabel, org.openide.util.NbBundle.getMessage(CollectionTopComponent.class, "CollectionTopComponent.FirstFilterLabel.text")); // NOI18N
        FirstFilterLabel.setOpaque(true);

        FirstFilterComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "None", "Query", "Source" }));

        collectionDisplayPanel.setBackground(new java.awt.Color(255, 255, 255));
        collectionDisplayPanel.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));

        javax.swing.GroupLayout collectionDisplayPanelLayout = new javax.swing.GroupLayout(collectionDisplayPanel);
        collectionDisplayPanel.setLayout(collectionDisplayPanelLayout);
        collectionDisplayPanelLayout.setHorizontalGroup(
            collectionDisplayPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1053, Short.MAX_VALUE)
        );
        collectionDisplayPanelLayout.setVerticalGroup(
            collectionDisplayPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 395, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout VisualizerLayout = new javax.swing.GroupLayout(Visualizer);
        Visualizer.setLayout(VisualizerLayout);
        VisualizerLayout.setHorizontalGroup(
            VisualizerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(VisualizerLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(VisualizerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(collectionDisplayPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(VisualizerLayout.createSequentialGroup()
                        .addComponent(FirstFilterLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(FirstFilterComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        VisualizerLayout.setVerticalGroup(
            VisualizerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(VisualizerLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(collectionDisplayPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(VisualizerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(FirstFilterLabel)
                    .addComponent(FirstFilterComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        Tab.addTab(org.openide.util.NbBundle.getMessage(CollectionTopComponent.class, "CollectionTopComponent.Visualizer.TabConstraints.tabTitle"), Visualizer); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(Tab)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(Tab)
                .addContainerGap())
        );

        getAccessibleContext().setAccessibleName(org.openide.util.NbBundle.getMessage(CollectionTopComponent.class, "CollectionTopComponent.AccessibleContext.accessibleName")); // NOI18N
        getAccessibleContext().setAccessibleDescription(org.openide.util.NbBundle.getMessage(CollectionTopComponent.class, "CollectionTopComponent.AccessibleContext.accessibleDescription")); // NOI18N
    }// </editor-fold>//GEN-END:initComponents

    private void ResetButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ResetButtonActionPerformed
        resetQueryBuilder();
    }//GEN-LAST:event_ResetButtonActionPerformed

    private void CreateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CreateButtonActionPerformed
        if(querySettingsAreValid()) {
            createQuery();
        }
    }//GEN-LAST:event_CreateButtonActionPerformed

    private void RunButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RunButtonActionPerformed
        if (coll.getQueriesCollection().getCount() > 0) {
            RequestProcessor executor = new RequestProcessor(coll.getName());
            try {
                etb.clearAll();
                EntitiesCollection entities = coll.getEntitiesCollection();
                
                Future<EntitiesCollection> result;
                
                Dispatcher dispatcher = new Dispatcher(coll.getQueriesCollection());
                result = executor.submit(dispatcher);
                
                EntitiesCollection newEntities;
                try
                {
                    newEntities = result.get();
                    entities.addThing(newEntities);
                }
                catch(InterruptedException | ExecutionException e){}
                
                entityModelChange();
                paintVisualDisplay();
                
            } catch (HttpException ex) {
                output("502 Proxy Error: endpoint not available.");
            } finally {
                executor.shutdown();
            }
        } else {
            resetEntitiesAndDisplay();
            Tab.setSelectedIndex(TAB_VISUAL);
        }
    }//GEN-LAST:event_RunButtonActionPerformed

    private void DeleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteButtonActionPerformed
        int row = QueriesTable.getSelectedRow();
        if(row != -1) {
            String queryName;
            queryName = (String) qtb.getValueAt(row, qtb.findColumn("Name"));
            coll.getEntitiesCollection().removeQuery(queryName);
            qtb.deleteSource(row);
            entityModelChange();
            queryModelChange();
            paintVisualDisplay();   
        }
    }//GEN-LAST:event_DeleteButtonActionPerformed

    private void TitleTextBoxKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TitleTextBoxKeyReleased
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            coll.setName(TitleTextBox.getText());
            setName(coll.getName());
            NotesTextBox.requestFocus();
        }
    }//GEN-LAST:event_TitleTextBoxKeyReleased

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel AndText1;
    private javax.swing.JButton CreateButton;
    private javax.swing.JTextField CreationEndYearTextField;
    private javax.swing.JTextField CreationStartYearTextField;
    private javax.swing.JLabel CreationYearLabel;
    private javax.swing.JButton DeleteButton;
    private javax.swing.JTextField DepictionTextField;
    private javax.swing.JPanel Entities;
    private javax.swing.JScrollPane EntitiesScrollPane;
    private javax.swing.JTable EntitiesTable;
    private javax.swing.JLabel ExistingQueriesText;
    private javax.swing.JComboBox<String> FirstFilterComboBox;
    private javax.swing.JLabel FirstFilterLabel;
    private javax.swing.JCheckBox HasConsistsCheckBox;
    private javax.swing.JCheckBox HasDepictionCheckBox;
    private javax.swing.JCheckBox HasIdentifierCheckBox;
    private javax.swing.JCheckBox HasImageCheckBox;
    private javax.swing.JCheckBox HasLimitCheckBox;
    private javax.swing.JCheckBox HasNameCheckBox;
    private javax.swing.JCheckBox HasTechniqueCheckBox;
    private javax.swing.JCheckBox HasTypeCheckBox;
    private javax.swing.JTextField IdentifierTextField;
    private javax.swing.JPanel Information;
    private javax.swing.JTextField LimitTextField;
    private javax.swing.JTextField MaterialTextField;
    private javax.swing.JTextField NameTextField;
    private javax.swing.JLabel NotesText;
    private javax.swing.JTextArea NotesTextBox;
    private javax.swing.JScrollPane NotesTextPanel;
    private javax.swing.JPanel Queries;
    private javax.swing.JScrollPane QueriesScrollPane;
    private javax.swing.JTable QueriesTable;
    private javax.swing.JLabel QueryBuilderText;
    private javax.swing.JTextField QueryNameTextField;
    private javax.swing.JSeparator QuerySeparator;
    private javax.swing.JButton ResetButton;
    private javax.swing.JButton RunButton;
    private javax.swing.JComboBox<String> SourceComboBox;
    private javax.swing.JLabel SourceNameTextLabel;
    private javax.swing.JLabel SourceTextLabel;
    private javax.swing.JTabbedPane Tab;
    private javax.swing.JTextField TechniqueTextField;
    private javax.swing.JTextField TitleTextBox;
    private javax.swing.JTextField TypeTextField;
    private javax.swing.JSeparator VerticalSeparator;
    private javax.swing.JPanel Visualizer;
    private org.jghill.timelinesvisualizercollections.display.CollectionDisplayPanel collectionDisplayPanel;
    private javax.swing.JSeparator jSeparator1;
    // End of variables declaration//GEN-END:variables
    
    private static final int TAB_VISUAL = 3;
    
    private final EntityTableModel etb;
    private final QueryTableModel qtb;
    private final Collection coll;
    private final InstanceContent content = new InstanceContent();
    private final AbstractLookup abLookup = new AbstractLookup(content);
    private final Lookup.Result <Source> sources;
    
    @Override
    public void componentOpened() {
        setName(coll.getName());
        associateLookup(abLookup);
        queryModelChange();
        paintVisualDisplay();
    }

    @Override
    public void componentClosed() {}

    void writeProperties(java.util.Properties p) {
        p.setProperty("version", "1.0");
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
    }
    
    /**
     * A getter for the collection to be returned from this top component.
     * @return the collection.
     */
    public Collection getCollection() {
        return coll;
    }
    
    /**
     * Resets the query building section of the GUI.
     */
    private void resetQueryBuilder() {
        
        SourceNameTextLabel.setText("");
        
        SourceComboBox.setSelectedIndex(0);
        QueryNameTextField.setText("");
        
        CreationEndYearTextField.setText("");
        CreationStartYearTextField.setText("");
        
        HasNameCheckBox.setSelected(false);
        NameTextField.setText("");
        
        HasIdentifierCheckBox.setSelected(false);
        IdentifierTextField.setText("");
        
        HasDepictionCheckBox.setSelected(false);
        DepictionTextField.setText("");
        
        HasConsistsCheckBox.setSelected(false);
        MaterialTextField.setText("");
        
        HasTypeCheckBox.setSelected(false);
        TypeTextField.setText("");
                
        HasTechniqueCheckBox.setSelected(false);
        TechniqueTextField.setText("");
        
        HasLimitCheckBox.setSelected(true);
        LimitTextField.setText("10");
        
        HasImageCheckBox.setSelected(false);
        
    }
    
    /**
     * Checks whether the query builder section has been filled correctly.
     * @return where it has been filled correctly.
     */
    private boolean querySettingsAreValid() {
        
        String startYear = CreationStartYearTextField.getText();
        if(startYear.length() > 4) {return false;}
        if(!Pattern.matches("[0-9]+", startYear) && !startYear.isEmpty()) {return false;}
        
        String endYear = CreationEndYearTextField.getText();
        if(endYear.length() > 4) {return false;}
        if(!Pattern.matches("[0-9]+", endYear) && !endYear.isEmpty()) {return false;}
        
        if(QueryNameTextField.getText().isEmpty()) {return false;}
        if(SourceComboBox.getSelectedItem().toString() == null) {return false;}
        
        return true;
        
    }
    
    /**
     * Creates a query.
     */
    private void createQuery() {
        QuerySettings settings;
        settings = new QuerySettings(
                (Source) SourceComboBox.getSelectedItem(),
                QueryNameTextField.getText().trim(),
                
                CreationEndYearTextField.getText().trim(),
                CreationStartYearTextField.getText().trim(),
                
                HasNameCheckBox.isSelected(),
                NameTextField.getText().trim(),
            
                HasIdentifierCheckBox.isSelected(),
                IdentifierTextField.getText().trim(),
                
                HasDepictionCheckBox.isSelected(),
                DepictionTextField.getText().trim(),
                
                HasConsistsCheckBox.isSelected(),
                MaterialTextField.getText().trim(),
                
                HasTypeCheckBox.isSelected(),
                TypeTextField.getText().trim(),
                
                HasTechniqueCheckBox.isSelected(),
                TechniqueTextField.getText().trim(),
                
                HasLimitCheckBox.isSelected(),
                LimitTextField.getText().trim(),
                
                HasImageCheckBox.isSelected()
        );
        QueryShell qry;
        QueryBuilder builder = QueryBuilder.getInstance();
        qry = builder.buildQuery(settings);
        coll.getQueriesCollection().addQuery(qry);
        resetQueryBuilder();
        queryModelChange();
    }
    
    /**
     * Fires changes to the query model table;
     */
    private void queryModelChange() {
        qtb.fireTableDataChanged();
    }
    
    /**
     * Fires changes to the entity model table;
     */
    private void entityModelChange() {
        etb.fireTableDataChanged();
    }
    
    /**
     * Outputs an explanation of the action.
     * @param text toString of the returned entity.
     */
    private void output(String text) {
        InputOutput io = IOProvider.getDefault().getIO("Main", false);
        io.getOut().println(text);
    }
    
    /**
     * Resets the entities collection and the collection display.
     */
    private void resetEntitiesAndDisplay() {
        etb.clearAll();
        collectionDisplayPanel.clear();
    }
    
    /**
     * Paints the visual display.
     */
    private void paintVisualDisplay() {
        if (etb.getFlattenedCollection().length > 0) {
            collectionDisplayPanel.setArray(etb.getFlattenedCollection());
            Tab.
                    setSelectedIndex(TAB_VISUAL);
        }
    }

    @Override
    public void focusGained(FocusEvent e) {
        EntityDisplay temp = (EntityDisplay) e.getSource();
        content.add(temp.getLookup().lookupResult(Entities.class).allInstances().iterator().next());
    }

    @Override
    public void focusLost(FocusEvent e) {
        EntityDisplay temp = (EntityDisplay) e.getSource();
        content.remove(temp.getLookup().lookupResult(Entities.class).allInstances().iterator().next());
    }
    
    /**
     * A getter for the First Filter combobox.
     * @return the First Filter comboBox.
     */
    public JComboBox<String> getFirstFilter() {
        return FirstFilterComboBox;
    }

}