package org.jghill.timelinevisualizersourcesgui;

import org.jghill.timelinevisualizersources.SPARQLEndpoint;
import org.jghill.timelinevisualizersources.Source;
import org.jghill.timelinevisualizersources.SourceTableModel;

/**
 * A dialog for editing sources in the SourceCollection.
 * 
 * @author JGHill
 */
public class SourceManagementEdit extends javax.swing.JDialog {

    private final Source src;
    private final String name;
    private final String type;
    
    /**
     * Creates new form SourceManagementEdit
     */
    public SourceManagementEdit(java.awt.Frame parent, boolean modal, Source src) {
        super(parent, modal);
        
        this.src = src;
        name = src.getSourceName();
        type = src.getSourceType();
        
        initComponents();
        
        SourceNameEntryBox.setText(name);
        SourceTypeTextBox.setText(type);
        setInternalPanelAccordingToType();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        SourceNameEntryBox = new javax.swing.JTextField();
        SourceNameText = new javax.swing.JLabel();
        SourceTypeText = new javax.swing.JLabel();
        Confirm = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        jSeparator2 = new javax.swing.JSeparator();
        SourceTypeTextBox = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle(org.openide.util.NbBundle.getMessage(SourceManagementEdit.class, "SourceManagementEdit.title")); // NOI18N
        setAlwaysOnTop(true);
        setIconImages(null);
        setMinimumSize(new java.awt.Dimension(400, 300));
        setName("New Source Tool"); // NOI18N
        setResizable(false);

        SourceNameEntryBox.setEditable(false);
        SourceNameEntryBox.setText(org.openide.util.NbBundle.getMessage(SourceManagementEdit.class, "SourceManagementEdit.SourceNameEntryBox.text")); // NOI18N
        SourceNameEntryBox.setOpaque(false);
        SourceNameEntryBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SourceNameEntryBoxActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(SourceNameText, org.openide.util.NbBundle.getMessage(SourceManagementEdit.class, "SourceManagementEdit.SourceNameText.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(SourceTypeText, org.openide.util.NbBundle.getMessage(SourceManagementEdit.class, "SourceManagementEdit.SourceTypeText.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(Confirm, org.openide.util.NbBundle.getMessage(SourceManagementEdit.class, "SourceManagementEdit.Confirm.text")); // NOI18N
        Confirm.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        Confirm.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        Confirm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ConfirmActionPerformed(evt);
            }
        });

        SourceTypeTextBox.setEditable(false);
        SourceTypeTextBox.setText(org.openide.util.NbBundle.getMessage(SourceManagementEdit.class, "SourceManagementEdit.SourceTypeTextBox.text")); // NOI18N
        SourceTypeTextBox.setMaximumSize(new java.awt.Dimension(150, 20));
        SourceTypeTextBox.setMinimumSize(new java.awt.Dimension(150, 20));
        SourceTypeTextBox.setPreferredSize(new java.awt.Dimension(150, 20));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(SourceTypeText, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(SourceNameText, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(SourceNameEntryBox)
                    .addComponent(jSeparator1)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 311, Short.MAX_VALUE)
                        .addComponent(Confirm))
                    .addComponent(jSeparator2)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(SourceTypeTextBox, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(SourceNameText, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(SourceNameEntryBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(SourceTypeText)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(SourceTypeTextBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 139, Short.MAX_VALUE)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Confirm)
                .addContainerGap())
        );

        setSize(new java.awt.Dimension(416, 339));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void SourceNameEntryBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SourceNameEntryBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_SourceNameEntryBoxActionPerformed

    private void ConfirmActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ConfirmActionPerformed
        if(!internalPanel.getText().isEmpty()) {
            editSPARQLEndpoint();
            this.dispose();
        }
    }//GEN-LAST:event_ConfirmActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Confirm;
    private javax.swing.JTextField SourceNameEntryBox;
    private javax.swing.JLabel SourceNameText;
    private javax.swing.JLabel SourceTypeText;
    private javax.swing.JTextField SourceTypeTextBox;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    // End of variables declaration//GEN-END:variables

    private SPARQLEndpointPanel internalPanel;
    private SourceTableModel sourceTable;
    
    /**
     * A method for creating a new SPARQLEndpoint.
     */
    private void editSPARQLEndpoint() {
        String webText = internalPanel.getText();
        SPARQLEndpoint sparql = (SPARQLEndpoint)src;
        sparql.setWebAddress(webText);
    }
    
    private void setInternalPanelAccordingToType() {
        switch(type) {
            case "SPARQL Endpoint":
                addSPARQLEndpointDialog();
                break;
            default:
                break;
        }
    }
    
    /**
     * A method for adding options for a SPARQL endpoint.
     */
    private void addSPARQLEndpointDialog() {
        internalPanel = new SPARQLEndpointPanel();
        internalPanel.setSize(360, 120);
        internalPanel.setLocation(10, 120);
        SPARQLEndpoint sparql = (SPARQLEndpoint)src;
        internalPanel.setText(sparql.getWebAddress());
        this.add(internalPanel);
        validate();
        repaint();
    }
    
    /**
     * A setter for a sourceTableModel to be updated by this class.
     * 
     * @param s the sourceTableModel to be added.
     */
    public void setSourceTableModel(SourceTableModel s) {
        sourceTable = s;
    }

}